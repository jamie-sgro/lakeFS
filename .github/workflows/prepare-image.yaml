name: Prepare image for tests
on:
  pull_request:
    paths-ignore:
      - "docs/**"
      - "webui/**"
      - "design/**"
  push:
    paths-ignore:
      - "docs/**"
      - "webui/**"
      - "design/**"
    branches:
      - master
      - cryptolake

jobs:
  check-secrets:
    name: Check if secrets are available.
    outputs:
      secretsavailable: ${{ steps.enablejobs.outputs.secretsavailable }}
    runs-on: ubuntu-20.04
    steps:
      - id: enablejobs
        env:
          ENABLE_NEXT_JOBS: ${{ secrets.AWS_ACCESS_KEY_ID }}
        run: |
          echo "Enable next jobs based on secrets existence: ${{ env.ENABLE_NEXT_JOBS != '' }}"
          echo "::set-output name=secretsavailable::${{ env.ENABLE_NEXT_JOBS != '' }}"

  gen-code:
    name: Generate code from latest lakeFS app
    runs-on: ubuntu-20.04
    steps:
      - name: Check-out code
        uses: actions/checkout@v2

      # No way to share code between workflows :-( If you change this, find and change the
      # same code wherever "Find Go module and build caches" appears!
      - name: Find Go module and build caches
        run: |
          echo GOMODCACHE=`go env GOMODCACHE` >> $GITHUB_ENV
          echo GOCACHE=`go env GOCACHE` >> $GITHUB_ENV
          cat $GITHUB_ENV

      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.16.2
        id: go

      - name: Cache Go modules and builds
        uses: actions/cache@v2
        env:
          cache-name: cache-go-modules
        with:
          path: |
            ${{ env.GOMODCACHE }}
            ${{ env.GOCACHE }}
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('go.mod', 'go.sum') }}
          restore-keys:
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Generate code
        run: |
          make gen
          tar -cf /tmp/generated.tar.gz .

      - name: Store generated code
        uses: actions/upload-artifact@v2
        with:
          name: generated-code
          path: /tmp/generated.tar.gz

  deploy-image:
    name: "Build and push Docker image"
    needs: [check-secrets, gen-code]
    if: needs.check-secrets.outputs.secretsavailable == 'true'
    runs-on: ubuntu-20.04
    outputs:
      tag: ${{ steps.version.outputs.tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup UI
        uses: actions/setup-node@v1
        with:
          node-version: '15.x'

      - name: Setup Go
        uses: actions/setup-go@v1
        with:
          go-version: 1.16.2
        id: go

      - name: Retrieve generated code
        uses: actions/download-artifact@v2
        with:
          name: generated-code
          path: /tmp/

      - name: Unpack generated code
        run: tar -xf /tmp/generated.tar.gz

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Extract version
        shell: bash
        run: echo "::set-output name=tag::sha-$(git rev-parse --short HEAD | sed s/^v//g)"
        id: version

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Export ECR parameters
        run: |
          echo "ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}" >> $GITHUB_ENV
          echo "ECR_REPOSITORY_LAKEFS=lakefs" >> $GITHUB_ENV

      - name: Login to GitHub Docker Registry
        uses: docker/login-action@v1
        with:
          registry: docker.pkg.github.com
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Pull last built docker image cache
        run: |
          docker pull docker.pkg.github.com/${GITHUB_REPOSITORY,,}/build-cache:${{ steps.version.outputs.tag }} || \
          docker pull docker.pkg.github.com/${GITHUB_REPOSITORY,,}/build-cache || \
          true
      - name: Build Docker image with cache and push
        run: |
          set -ex
          ghr=docker.pkg.github.com/${GITHUB_REPOSITORY,,}/build-cache
          ghr_build_tag="-t ${ghr}:${{ steps.version.outputs.tag }}"
          if [[ -n $GITHUB_REF ]]; then
              ghr_ref_tag="-t ${ghr}:${GITHUB_REF##*/}"
          else
              ghr_ref_tag=''
          fi
          ecr_tag="-t $ECR_REGISTRY/$ECR_REPOSITORY_LAKEFS:${{ steps.version.outputs.tag }}"
          docker build . \
              ${ghr_ref_tag} ${ghr_build_tag} ${ecr_tag} \
              --build-arg VERSION=${{ steps.version.outputs.tag }} \
              --cache-from=${ghr}
          docker push ${ghr_build_tag#-t }
          if [[ -n ${ghr_ref_tag} ]]; then docker push ${ghr_ref_tag#-t }; fi
        env:
          DOCKER_BUILDKIT: '1'
      - name: Push to Amazon ECR
        run: |
          set +e
          describe_image="$( aws ecr describe-images --repository-name $ECR_REPOSITORY_LAKEFS --image-ids imageTag=${{ steps.version.outputs.tag }})"
          if [ $? -eq 0 ]; then
            echo "Image exists"
          else
            echo "Image doesn't exist"
            docker push $ECR_REGISTRY/$ECR_REPOSITORY_LAKEFS:${{ steps.version.outputs.tag }}
          fi
